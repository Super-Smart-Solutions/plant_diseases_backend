{"openapi":"3.1.0","info":{"title":"planet_diseases_backend","version":"0.1.0"},"paths":{"/api/health":{"get":{"summary":"Health Check","description":"Checks the health of a project.\n\nIt returns 200 if the project is healthy.","operationId":"health_check_api_health_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/api/auth/register":{"post":{"tags":["auth"],"summary":"Register:Register","operationId":"register_register_api_auth_register_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserCreate"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRead"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorModel"},"examples":{"REGISTER_USER_ALREADY_EXISTS":{"summary":"A user with this email already exists.","value":{"detail":"REGISTER_USER_ALREADY_EXISTS"}},"REGISTER_INVALID_PASSWORD":{"summary":"Password validation failed.","value":{"detail":{"code":"REGISTER_INVALID_PASSWORD","reason":"Password should beat least 3 characters"}}}}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/auth/forgot-password":{"post":{"tags":["auth"],"summary":"Reset:Forgot Password","operationId":"reset_forgot_password_api_auth_forgot_password_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Body_reset_forgot_password_api_auth_forgot_password_post"}}},"required":true},"responses":{"202":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/auth/reset-password":{"post":{"tags":["auth"],"summary":"Reset:Reset Password","operationId":"reset_reset_password_api_auth_reset_password_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Body_reset_reset_password_api_auth_reset_password_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorModel"},"examples":{"RESET_PASSWORD_BAD_TOKEN":{"summary":"Bad or expired token.","value":{"detail":"RESET_PASSWORD_BAD_TOKEN"}},"RESET_PASSWORD_INVALID_PASSWORD":{"summary":"Password validation failed.","value":{"detail":{"code":"RESET_PASSWORD_INVALID_PASSWORD","reason":"Password should be at least 3 characters"}}}}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/auth/request-verify-token":{"post":{"tags":["auth"],"summary":"Verify:Request-Token","operationId":"verify_request_token_api_auth_request_verify_token_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Body_verify_request_token_api_auth_request_verify_token_post"}}},"required":true},"responses":{"202":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/auth/verify":{"post":{"tags":["auth"],"summary":"Verify:Verify","operationId":"verify_verify_api_auth_verify_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Body_verify_verify_api_auth_verify_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRead"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorModel"},"examples":{"VERIFY_USER_BAD_TOKEN":{"summary":"Bad token, not existing user ornot the e-mail currently set for the user.","value":{"detail":"VERIFY_USER_BAD_TOKEN"}},"VERIFY_USER_ALREADY_VERIFIED":{"summary":"The user is already verified.","value":{"detail":"VERIFY_USER_ALREADY_VERIFIED"}}}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/users/me":{"get":{"tags":["users"],"summary":"Users:Current User","operationId":"users_current_user_api_users_me_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRead"}}}},"401":{"description":"Missing token or inactive user."}},"security":[{"OAuth2PasswordBearer":[]}]},"patch":{"tags":["users"],"summary":"Users:Patch Current User","operationId":"users_patch_current_user_api_users_me_patch","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserUpdate"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRead"}}}},"401":{"description":"Missing token or inactive user."},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorModel"},"examples":{"UPDATE_USER_EMAIL_ALREADY_EXISTS":{"summary":"A user with this email already exists.","value":{"detail":"UPDATE_USER_EMAIL_ALREADY_EXISTS"}},"UPDATE_USER_INVALID_PASSWORD":{"summary":"Password validation failed.","value":{"detail":{"code":"UPDATE_USER_INVALID_PASSWORD","reason":"Password should beat least 3 characters"}}}}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/users/{id}":{"get":{"tags":["users"],"summary":"Users:User","operationId":"users_user_api_users__id__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"id","in":"path","required":true,"schema":{"type":"string","title":"Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRead"}}}},"401":{"description":"Missing token or inactive user."},"403":{"description":"Not a superuser."},"404":{"description":"The user does not exist."},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"patch":{"tags":["users"],"summary":"Users:Patch User","operationId":"users_patch_user_api_users__id__patch","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"id","in":"path","required":true,"schema":{"type":"string","title":"Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserUpdate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRead"}}}},"401":{"description":"Missing token or inactive user."},"403":{"description":"Not a superuser."},"404":{"description":"The user does not exist."},"400":{"content":{"application/json":{"examples":{"UPDATE_USER_EMAIL_ALREADY_EXISTS":{"summary":"A user with this email already exists.","value":{"detail":"UPDATE_USER_EMAIL_ALREADY_EXISTS"}},"UPDATE_USER_INVALID_PASSWORD":{"summary":"Password validation failed.","value":{"detail":{"code":"UPDATE_USER_INVALID_PASSWORD","reason":"Password should beat least 3 characters"}}}},"schema":{"$ref":"#/components/schemas/ErrorModel"}}},"description":"Bad Request"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["users"],"summary":"Users:Delete User","operationId":"users_delete_user_api_users__id__delete","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"id","in":"path","required":true,"schema":{"type":"string","title":"Id"}}],"responses":{"204":{"description":"Successful Response"},"401":{"description":"Missing token or inactive user."},"403":{"description":"Not a superuser."},"404":{"description":"The user does not exist."},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/auth/jwt/login":{"post":{"tags":["auth"],"summary":"Auth:Jwt.Login","operationId":"auth_jwt_login_api_auth_jwt_login_post","requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_auth_jwt_login_api_auth_jwt_login_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BearerResponse"},"example":{"access_token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI","token_type":"bearer"}}}},"400":{"description":"Bad Request","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ErrorModel"},"examples":{"LOGIN_BAD_CREDENTIALS":{"summary":"Bad credentials or the user is inactive.","value":{"detail":"LOGIN_BAD_CREDENTIALS"}},"LOGIN_USER_NOT_VERIFIED":{"summary":"The user is not verified.","value":{"detail":"LOGIN_USER_NOT_VERIFIED"}}}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/auth/jwt/logout":{"post":{"tags":["auth"],"summary":"Auth:Jwt.Logout","operationId":"auth_jwt_logout_api_auth_jwt_logout_post","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"401":{"description":"Missing token or inactive user."}},"security":[{"OAuth2PasswordBearer":[]}]}},"/api/users/":{"get":{"tags":["users"],"summary":"Get User Models","description":"Retrieve a list of user models from the database.\n\nArgs:\n    response (Response): The HTTP response object, used to set response headers.\n    limit (int, optional): The maximum number of users to retrieve. Defaults to 10.\n    offset (int, optional): The number of user models to skip. Defaults to 0.\n    db (AsyncSession, optional): The database session dependency.\n\nReturns:\n    List[User]: A list of user models.","operationId":"get_user_models_api_users__get","parameters":[{"name":"limit","in":"query","required":false,"schema":{"type":"integer","default":10,"title":"Limit"}},{"name":"offset","in":"query","required":false,"schema":{"type":"integer","default":0,"title":"Offset"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/UserResponseModel"},"title":"Response Get User Models Api Users  Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/echo/":{"post":{"tags":["echo"],"summary":"Send Echo Message","description":"Sends echo back to user.\n\n:param incoming_message: incoming message.\n:returns: message same as the incoming.","operationId":"send_echo_message_api_echo__post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Message"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Message"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/farms/":{"get":{"tags":["farms"],"summary":"Retrieve All Farms","description":"Retrieves a list of all farms.\n\nArgs:\n    farm_dao (FarmDAO, Depends): Injected dependency providing access to the FarmDAO.\n\nReturns:\n    list[FarmResponseSchema]: A list of all farm objects.","operationId":"retrieve_all_farms_api_farms__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/FarmResponseSchema"},"type":"array","title":"Response Retrieve All Farms Api Farms  Get"}}}}}},"post":{"tags":["farms"],"summary":"Create Farm","description":"Creates a new farm record.\n\nArgs:\n    new_farm (FarmCreateSchema): The data for the new farm.\n    farm_dao (FarmDAO, Depends): Injected dependency providing access to the FarmDAO.\n\nReturns:\n    FarmResponseSchema: The newly created farm details.\n\nRaises:\n    HTTPException: 500 Internal Server Error if creation fails.","operationId":"create_farm_api_farms__post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/FarmCreateSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/FarmResponseSchema"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/farms/{farm_id}":{"get":{"tags":["farms"],"summary":"Retrieve Farm","description":"Retrieves a farm by its ID.\n\nArgs:\n    farm_id (int): The ID of the farm to retrieve.\n    farm_dao (FarmDAO, Depends): Injected dependency providing access to the FarmDAO.\n\nReturns:\n    FarmResponseSchema: The retrieved farm details.\n\nRaises:\n    HTTPException: 404 Not Found if the farm is not found.","operationId":"retrieve_farm_api_farms__farm_id__get","parameters":[{"name":"farm_id","in":"path","required":true,"schema":{"type":"integer","title":"Farm Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/FarmResponseSchema"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"put":{"tags":["farms"],"summary":"Update Farm","description":"Updates an existing farm record.\n\nArgs:\n    farm (FarmUpdateSchema): The updated data for the farm.\n    farm_id (int): The ID of the farm to update.\n    farm_dao (FarmDAO, Depends): Injected dependency providing access to the FarmDAO.\n\nReturns:\n    FarmResponseSchema: The updated farm details.\n\nRaises:\n    HTTPException: 404 Not Found if the farm is not found.","operationId":"update_farm_api_farms__farm_id__put","parameters":[{"name":"farm_id","in":"path","required":true,"schema":{"type":"integer","title":"Farm Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/FarmUpdateSchema"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["farms"],"summary":"Delete Farm","description":"Deletes a farm by its ID.\n\nArgs:\n    farm_id (int): The ID of the farm to delete.\n    farm_dao (FarmDAO, Depends): Injected dependency providing access to the FarmDAO.\n\nReturns:\n    None\n\nRaises:\n    HTTPException: 404 Not Found if the farm is not found.","operationId":"delete_farm_api_farms__farm_id__delete","parameters":[{"name":"farm_id","in":"path","required":true,"schema":{"type":"integer","title":"Farm Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/crops/":{"get":{"tags":["crops"],"summary":"Retrieve All Crops","description":"Retrieves a list of all crops.\n\nArgs:\n    crop_dao (CropDAO, Depends): Injected dependency providing access to the CropDAO.\n\nReturns:\n    list[CropResponseSchema]: A list of all crop objects.","operationId":"retrieve_all_crops_api_crops__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/CropResponseSchema"},"type":"array","title":"Response Retrieve All Crops Api Crops  Get"}}}}}},"post":{"tags":["crops"],"summary":"Create Crop","description":"Creates a new crop record.\n\nArgs:\n    new_crop (CropCreateSchema): The data for the new crop.\n    crop_dao (CropDAO, Depends): Injected dependency providing access to the CropDAO.\n\nReturns:\n    CropResponseSchema: The newly created crop details.\n\nRaises:\n    HTTPException: 500 Internal Server Error if creation fails.","operationId":"create_crop_api_crops__post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CropCreateSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CropResponseSchema"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/crops/{crop_id}":{"get":{"tags":["crops"],"summary":"Retrieve Crop","description":"Retrieves a crop by its ID.\n\nArgs:\n    crop_id (int): The ID of the crop to retrieve.\n    crop_dao (CropDAO, Depends): Injected dependency providing access to the CropDAO.\n\nReturns:\n    CropResponseSchema: The retrieved crop details.\n\nRaises:\n    HTTPException: 404 Not Found if the crop is not found.","operationId":"retrieve_crop_api_crops__crop_id__get","parameters":[{"name":"crop_id","in":"path","required":true,"schema":{"type":"integer","title":"Crop Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CropResponseSchema"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"put":{"tags":["crops"],"summary":"Update Crop","description":"Updates an existing crop record.\n\nArgs:\n    crop (CropUpdateSchema): The updated data for the crop.\n    crop_id (int): The ID of the crop to update.\n    crop_dao (CropDAO, Depends): Injected dependency providing access to the CropDAO.\n\nReturns:\n    CropResponseSchema: The updated crop details.\n\nRaises:\n    HTTPException: 404 Not Found if the crop is not found.","operationId":"update_crop_api_crops__crop_id__put","parameters":[{"name":"crop_id","in":"path","required":true,"schema":{"type":"integer","title":"Crop Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CropUpdateSchema"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["crops"],"summary":"Delete Crop","description":"Deletes a crop by its ID.\n\nArgs:\n    crop_id (int): The ID of the crop to delete.\n    crop_dao (CropDAO, Depends): Injected dependency providing access to the CropDAO.\n\nReturns:\n    None\n\nRaises:\n    HTTPException: 404 Not Found if the crop is not found.","operationId":"delete_crop_api_crops__crop_id__delete","parameters":[{"name":"crop_id","in":"path","required":true,"schema":{"type":"integer","title":"Crop Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/diseases/":{"get":{"tags":["diseases"],"summary":"Retrieve All Diseases","description":"Retrieves a list of all diseases.\n\nArgs:\n    disease_dao (DiseaseDAO, Depends): Injected dependency providing access to the DiseaseDAO.\n\nReturns:\n    list[DiseaseResponseSchema]: A list of all disease objects.","operationId":"retrieve_all_diseases_api_diseases__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/DiseaseResponseSchema"},"type":"array","title":"Response Retrieve All Diseases Api Diseases  Get"}}}}}},"post":{"tags":["diseases"],"summary":"Create Disease","description":"Creates a new disease record.\n\nArgs:\n    new_disease (DiseaseCreateSchema): The data for the new disease.\n    disease_dao (DiseaseDAO, Depends): Injected dependency providing access to the DiseaseDAO.\n\nReturns:\n    DiseaseResponseSchema: The newly created disease details.\n\nRaises:\n    HTTPException: 500 Internal Server Error if creation fails.","operationId":"create_disease_api_diseases__post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DiseaseCreateSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DiseaseResponseSchema"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/diseases/{disease_id}":{"get":{"tags":["diseases"],"summary":"Retrieve Disease","description":"Retrieves a disease by its ID.\n\nArgs:\n    disease_id (int): The ID of the disease to retrieve.\n    disease_dao (DiseaseDAO, Depends): Injected dependency providing access to the DiseaseDAO.\n\nReturns:\n    DiseaseResponseSchema: The retrieved disease details.\n\nRaises:\n    HTTPException: 404 Not Found if the disease is not found.","operationId":"retrieve_disease_api_diseases__disease_id__get","parameters":[{"name":"disease_id","in":"path","required":true,"schema":{"type":"integer","title":"Disease Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DiseaseResponseSchema"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"put":{"tags":["diseases"],"summary":"Update Disease","description":"Updates an existing disease record.\n\nArgs:\n    disease (DiseaseUpdateSchema): The updated data for the disease.\n    disease_id (int): The ID of the disease to update.\n    disease_dao (DiseaseDAO, Depends): Injected dependency providing access to the DiseaseDAO.\n\nReturns:\n    DiseaseResponseSchema: The updated disease details.\n\nRaises:\n    HTTPException: 404 Not Found if the disease is not found.","operationId":"update_disease_api_diseases__disease_id__put","parameters":[{"name":"disease_id","in":"path","required":true,"schema":{"type":"integer","title":"Disease Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DiseaseUpdateSchema"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["diseases"],"summary":"Delete Disease","description":"Deletes a disease by its ID.\n\nArgs:\n    disease_id (int): The ID of the disease to delete.\n    disease_dao (DiseaseDAO, Depends): Injected dependency providing access to the DiseaseDAO.\n\nReturns:\n    None\n\nRaises:\n    HTTPException: 404 Not Found if the disease is not found.","operationId":"delete_disease_api_diseases__disease_id__delete","parameters":[{"name":"disease_id","in":"path","required":true,"schema":{"type":"integer","title":"Disease Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/images/":{"get":{"tags":["images"],"summary":"Retrieve All Image Data","description":"Retrieves a list of all image data.\n\nArgs:\n    image_data_dao (Image, Depends): Injected dependency providing access to the Image.\n\nReturns:\n    list[ImageResponseSchema]: A list of all image data objects.","operationId":"retrieve_all_image_data_api_images__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/ImageResponseSchema"},"type":"array","title":"Response Retrieve All Image Data Api Images  Get"}}}}}},"post":{"tags":["images"],"summary":"Create Image Data","description":"Creates a new image data record.\n\nArgs:\nnew_image (ImageCreateSchema): The data for the new image.\nimage_dao (ImageDAO, Depends): Injected dependency providing access to the ImageDAO.\n\nReturns:\n    ImageResponseSchema: The newly created image details.\n\nRaises:\n    HTTPException: 500 Internal Server Error if creation fails.","operationId":"create_image_data_api_images__post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImageCreateSchema"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImageResponseSchema"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/api/images/{image_id}":{"get":{"tags":["images"],"summary":"Retrieve Image","description":"Retrieves an image by its ID.\n\nArgs:\n    image_id (int): The ID of the image to retrieve.\n    image_dao (ImageDAO, Depends): Injected dependency providing access to the ImageDAO.\n\nReturns:\n    ImageResponseSchema: The retrieved image details.\n\nRaises:\n    HTTPException: 404 Not Found if the image is not found.","operationId":"retrieve_image_api_images__image_id__get","parameters":[{"name":"image_id","in":"path","required":true,"schema":{"type":"integer","title":"Image Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImageResponseSchema"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"put":{"tags":["images"],"summary":"Update Image","description":"Updates an existing image record.\n\nArgs:\nimage (ImageUpdateSchema): The updated data for the image.\nimage_id (int): The ID of the image to update.\nimage_dao (ImageDAO, Depends): Injected dependency providing access to the ImageDAO.\n\nReturns:\n    ImageResponseSchema: The updated image details.\n\nRaises:\n    HTTPException: 404 Not Found if the image is not found.","operationId":"update_image_api_images__image_id__put","parameters":[{"name":"image_id","in":"path","required":true,"schema":{"type":"integer","title":"Image Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImageUpdateSchema"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["images"],"summary":"Delete Image","description":"Deletes an image by its ID.\n\nArgs:\nimage_id (int): The ID of the image to delete.\nimage_dao (ImageDAO, Depends): Injected dependency providing access to the ImageDAO.\n\nReturns:\n    None.\n\nRaises:\n    HTTPException: 404 Not Found if the image is not found.","operationId":"delete_image_api_images__image_id__delete","parameters":[{"name":"image_id","in":"path","required":true,"schema":{"type":"integer","title":"Image Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/metrics":{"get":{"summary":"Prometheus Metrics","description":"Endpoint that serves Prometheus metrics.","operationId":"prometheus_metrics_metrics_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}}},"components":{"schemas":{"BearerResponse":{"properties":{"access_token":{"type":"string","title":"Access Token"},"token_type":{"type":"string","title":"Token Type"}},"type":"object","required":["access_token","token_type"],"title":"BearerResponse"},"Body_auth_jwt_login_api_auth_jwt_login_post":{"properties":{"grant_type":{"anyOf":[{"type":"string","pattern":"password"},{"type":"null"}],"title":"Grant Type"},"username":{"type":"string","title":"Username"},"password":{"type":"string","title":"Password"},"scope":{"type":"string","title":"Scope","default":""},"client_id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Client Id"},"client_secret":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Client Secret"}},"type":"object","required":["username","password"],"title":"Body_auth_jwt_login_api_auth_jwt_login_post"},"Body_reset_forgot_password_api_auth_forgot_password_post":{"properties":{"email":{"type":"string","format":"email","title":"Email"}},"type":"object","required":["email"],"title":"Body_reset_forgot_password_api_auth_forgot_password_post"},"Body_reset_reset_password_api_auth_reset_password_post":{"properties":{"token":{"type":"string","title":"Token"},"password":{"type":"string","title":"Password"}},"type":"object","required":["token","password"],"title":"Body_reset_reset_password_api_auth_reset_password_post"},"Body_verify_request_token_api_auth_request_verify_token_post":{"properties":{"email":{"type":"string","format":"email","title":"Email"}},"type":"object","required":["email"],"title":"Body_verify_request_token_api_auth_request_verify_token_post"},"Body_verify_verify_api_auth_verify_post":{"properties":{"token":{"type":"string","title":"Token"}},"type":"object","required":["token"],"title":"Body_verify_verify_api_auth_verify_post"},"CropCreateSchema":{"properties":{"name":{"type":"string","title":"Name"},"variety":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Variety"},"planting_date":{"anyOf":[{"type":"string","format":"date"},{"type":"null"}],"title":"Planting Date"},"harvest_date":{"anyOf":[{"type":"string","format":"date"},{"type":"null"}],"title":"Harvest Date"},"farm_id":{"type":"integer","title":"Farm Id"}},"type":"object","required":["name","farm_id"],"title":"CropCreateSchema","description":"Schema for creating a new crop."},"CropResponseSchema":{"properties":{"name":{"type":"string","title":"Name"},"variety":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Variety"},"planting_date":{"anyOf":[{"type":"string","format":"date"},{"type":"null"}],"title":"Planting Date"},"harvest_date":{"anyOf":[{"type":"string","format":"date"},{"type":"null"}],"title":"Harvest Date"},"farm_id":{"type":"integer","title":"Farm Id"},"id":{"type":"integer","title":"Id"},"created_at":{"type":"string","format":"date-time","title":"Created At"},"updated_at":{"type":"string","format":"date-time","title":"Updated At"}},"type":"object","required":["name","farm_id","id","created_at","updated_at"],"title":"CropResponseSchema","description":"Schema for representing a crop response."},"CropUpdateSchema":{"properties":{"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"variety":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Variety"},"planting_date":{"anyOf":[{"type":"string","format":"date"},{"type":"null"}],"title":"Planting Date"},"harvest_date":{"anyOf":[{"type":"string","format":"date"},{"type":"null"}],"title":"Harvest Date"},"farm_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Farm Id"}},"type":"object","title":"CropUpdateSchema","description":"Schema for updating an existing crop."},"DiseaseCreateSchema":{"properties":{"name":{"type":"string","title":"Name"},"symptoms":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Symptoms"},"treatment":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Treatment"}},"type":"object","required":["name"],"title":"DiseaseCreateSchema","description":"Schema for creating a new disease."},"DiseaseResponseSchema":{"properties":{"name":{"type":"string","title":"Name"},"symptoms":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Symptoms"},"treatment":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Treatment"},"id":{"type":"integer","title":"Id"},"created_at":{"type":"string","format":"date-time","title":"Created At"},"updated_at":{"type":"string","format":"date-time","title":"Updated At"}},"type":"object","required":["name","id","created_at","updated_at"],"title":"DiseaseResponseSchema","description":"Schema for representing a disease response."},"DiseaseUpdateSchema":{"properties":{"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"symptoms":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Symptoms"},"treatment":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Treatment"}},"type":"object","title":"DiseaseUpdateSchema","description":"Schema for updating an existing disease."},"ErrorModel":{"properties":{"detail":{"anyOf":[{"type":"string"},{"additionalProperties":{"type":"string"},"type":"object"}],"title":"Detail"}},"type":"object","required":["detail"],"title":"ErrorModel"},"FarmCreateSchema":{"properties":{"name":{"type":"string","title":"Name"},"location":{"type":"string","title":"Location"},"weather":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Weather"}},"type":"object","required":["name","location"],"title":"FarmCreateSchema","description":"Schema for creating a new farm."},"FarmResponseSchema":{"properties":{"name":{"type":"string","title":"Name"},"location":{"type":"string","title":"Location"},"weather":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Weather"},"id":{"type":"integer","title":"Id"},"created_at":{"type":"string","format":"date-time","title":"Created At"},"updated_at":{"type":"string","format":"date-time","title":"Updated At"}},"type":"object","required":["name","location","id","created_at","updated_at"],"title":"FarmResponseSchema","description":"Schema for representing a farm response."},"FarmUpdateSchema":{"properties":{"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"location":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Location"},"weather":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Weather"}},"type":"object","title":"FarmUpdateSchema","description":"Schema for updating an existing farm."},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"ImageCreateSchema":{"properties":{"image_url":{"type":"string","title":"Image Url"},"description":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Description"},"farm_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Farm Id"},"crop_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Crop Id"},"disease_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Disease Id"}},"type":"object","required":["image_url"],"title":"ImageCreateSchema","description":"Schema for creating a new image."},"ImageResponseSchema":{"properties":{"image_url":{"type":"string","title":"Image Url"},"description":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Description"},"farm_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Farm Id"},"crop_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Crop Id"},"disease_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Disease Id"},"id":{"type":"integer","title":"Id"},"created_at":{"type":"string","format":"date-time","title":"Created At"},"updated_at":{"type":"string","format":"date-time","title":"Updated At"}},"type":"object","required":["image_url","id","created_at","updated_at"],"title":"ImageResponseSchema","description":"Schema for representing an image response."},"ImageUpdateSchema":{"properties":{"image_url":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Image Url"},"description":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Description"},"farm_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Farm Id"},"crop_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Crop Id"},"disease_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Disease Id"}},"type":"object","title":"ImageUpdateSchema","description":"Schema for updating an existing image."},"Message":{"properties":{"message":{"type":"string","title":"Message"}},"type":"object","required":["message"],"title":"Message","description":"Simple message model."},"UserCreate":{"properties":{"email":{"type":"string","format":"email","title":"Email"},"password":{"type":"string","title":"Password"},"is_active":{"anyOf":[{"type":"boolean"},{"type":"null"}],"title":"Is Active","default":true},"is_superuser":{"anyOf":[{"type":"boolean"},{"type":"null"}],"title":"Is Superuser","default":false},"is_verified":{"anyOf":[{"type":"boolean"},{"type":"null"}],"title":"Is Verified","default":false}},"type":"object","required":["email","password"],"title":"UserCreate","description":"Represents a create command for a user."},"UserRead":{"properties":{"id":{"type":"string","format":"uuid","title":"Id"},"email":{"type":"string","format":"email","title":"Email"},"is_active":{"type":"boolean","title":"Is Active","default":true},"is_superuser":{"type":"boolean","title":"Is Superuser","default":false},"is_verified":{"type":"boolean","title":"Is Verified","default":false}},"type":"object","required":["id","email"],"title":"UserRead","description":"Represents a read command for a user."},"UserResponseModel":{"properties":{"id":{"type":"string","format":"uuid","title":"Id"},"email":{"type":"string","title":"Email"},"is_active":{"type":"boolean","title":"Is Active"},"is_verified":{"type":"boolean","title":"Is Verified"},"is_superuser":{"type":"boolean","title":"Is Superuser"}},"type":"object","required":["id","email","is_active","is_verified","is_superuser"],"title":"UserResponseModel","description":"UserResponseModel represents the response schema for user data in the API.\n\nAttributes:\n    id (UUID): The unique identifier of the user.\n    email (str): The email address of the user.\n    is_active (bool): Indicates whether the user's account is active.\n    is_verified (bool): Indicates whether the user's email has been verified.\n    is_superuser (bool): Indicates whether the user has superuser privileges."},"UserUpdate":{"properties":{"password":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Password"},"email":{"anyOf":[{"type":"string","format":"email"},{"type":"null"}],"title":"Email"},"is_active":{"anyOf":[{"type":"boolean"},{"type":"null"}],"title":"Is Active"},"is_superuser":{"anyOf":[{"type":"boolean"},{"type":"null"}],"title":"Is Superuser"},"is_verified":{"anyOf":[{"type":"boolean"},{"type":"null"}],"title":"Is Verified"}},"type":"object","title":"UserUpdate","description":"Represents an update command for a user."},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}},"securitySchemes":{"OAuth2PasswordBearer":{"type":"oauth2","flows":{"password":{"scopes":{},"tokenUrl":"auth/jwt/login"}}}}}}